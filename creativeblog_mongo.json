[{
  "_id": {
    "$oid": "6041c05879fc1142ec0cf1d4"
  },
  "title": "Question Test 1",
  "content": "If we ever wonder what God is like in His character, personality, or concern for others, we only need to look to Jesus to find out. Christ’s character, kindness, love, and mercy reveal God’s character. And although our amazing, awesome God is beyond our complete comprehension and understanding, we have a tremendous gift in what He’s revealed of Himself in Jesus.\n",
  "creationDate": "2021-03-05T05:23:16.588Z"
},{
  "_id": {
    "$oid": "6041c48579fc1142ec0cf1d8"
  },
  "title": "Test One",
  "content": "Using Icons via Global Use\nYou probably want to use our icons in more than one component in your project, right? Importing icons into each of your project’s components can be really tedious and prone to display errors - especially over time.\n\nInstead, you can add them once in your React application and reference them in any component. We recommend importing them via a “library” in the initializing module of your React application.\n\nHere’s an example:\n\nLet’s say we have a React Application, “Coffee Checker”, that alerts users when recently brewed coffee has been sitting around too long and freshness is compromised.\n\nWe use Coffee Checker’s App.js to initialize our app and library. Our app’s UI wants to use two individual icons, faCheckSquare and faCoffee. We also add all of the brands in @fortawesome/free-brands-svg-icons to build the showcase of the big companies that fictitiously use “Coffee Checker” over time.\n\n  \nimport ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faCheckSquare, faCoffee } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fab, faCheckSquare, faCoffee)\n\nIn our call to library.add() we’re passing:\n\nfab: which represents all of the brand icons in @fortawesome/free-brands-svg-icons. So any of the brand icons in that package may be referenced by icon name as a string anywhere else in our app. For example: \"apple\", \"microsoft\", or \"google\".\nfaCheckSquare and faCoffee: Adding each of these icons individually allows us to refer to them throughout our app by their icon string names, \"check-square\" and \"coffee\", respectively.\nOur application also has React components, Beverage and Showcase. After initializing the above library, we don’t have to re-import icons into each of them. We import the FontAwesomeIcon component, and when used, we supply the icon prop an icon name as a string. Here’s how that looks in our functional component, Beverage.js:\n\n  \nimport React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport const Beverage = () => (\n  <div>\n    <FontAwesomeIcon icon=\"check-square\" />\n    Your <FontAwesomeIcon icon=\"coffee\" /> is hot and ready!\n  </div>\n)\n\nHeads Up: Solid is the Default Style\nThere's one another piece of magic that's happening in the background when providing icon names as strings like this: the fas prefix (for Font Awesome Solid) is being inferred as the default.\nAnd here’s the Showcase.js component:\n\n  \nimport React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport const Showcase = () => (\n  <div>\n    <FontAwesomeIcon icon={['fab', 'apple']} />\n    <FontAwesomeIcon icon={['fab', 'microsoft']} />\n    <FontAwesomeIcon icon={['fab', 'google']} />\n\n    <FontAwesomeIcon icon=\"check-square\" />\n    With Coffee Checked, these companies always know their coffee is hot and ready!\n  </div>\n)\n\nWe used the \"check-square\" icon name again in this component, though we didn’t have to explicitly import it into this component thanks to the previous import and library addition in our App.js.\nThe \"check-square\" icon is getting a default prefix of fas here too, which is what we want, because that icon also lives in the @fortawesome/free-solid-svg-icons package.\nWe used the \"apple\", \"microsoft\", and \"google\" brand icons, which were never explicitly individually imported, but they’re available to us by name as strings because all brand icons were added to our library in App.js, and fab includes all of those icons.\nWe added the Brands-specific fab style prefix to reference those 3 brand icons.\nIcon Syntax\nAs our examples above show, the syntax to reference an icon in the above components is different than our traditional HTML-based syntax. These are all valid ways to define the icon prop:\n\n<FontAwesomeIcon icon=\"coffee\" />\n<FontAwesomeIcon icon={['fas', 'coffee']} />\n<FontAwesomeIcon icon={['far', 'coffee']} />\n<FontAwesomeIcon icon={faCoffee} />\n\nThe icon prop expects a single object:\n\nIt could be an icon object, like {faCoffee}.\nIt could a string object, like \"coffee\". (The curly braces around a string object supplied to a prop are optional, so we’ve omitted them.)\nOr it could be an Array of strings, where the first element is a style prefix, and the second element is the icon name: {[\"fab\", \"apple\"]}\nMore About Styles + Prefixes\nWe added more styles in Font Awesome 5 and are using prefixes to call specific ones when rendering icons. Check out our complete list of styles to see what's available in Font Awesome Free and Pro.\nFeatures\nAll of the style toolkit features available for general web use are also available in the official Font Awesome React component. Note, however, that the syntax is different from our general web-use documentation.\n\nWe're Using Shortcuts Below\nIn the following code snippets, we'll use the shortcut notation for the icons—referencing the icons by their names as strings. But remember, that option is only valid after you've either explicitly imported and added those icons to the library, or externally loaded an icon bundle. See the sections above for the details.\nSize\n\n<FontAwesomeIcon icon=\"coffee\" size=\"xs\" />\n<FontAwesomeIcon icon=\"coffee\" size=\"lg\" />\n<FontAwesomeIcon icon=\"coffee\" size=\"6x\" />\n\nNote that icon size can be controlled with the CSS font-size attribute, and FontAwesomeIcon's size prop determines icon size relative to the current font-size.\nFixed-Width Icons\n\n<FontAwesomeIcon icon=\"coffee\" fixedWidth />\n\nInverse:\n\n<FontAwesomeIcon icon=\"coffee\" inverse />\n\nIcons in a List:\n\n<FontAwesomeIcon icon=\"coffee\" listItem />\n\nRotating Icons:\n\n<FontAwesomeIcon icon=\"coffee\" rotation={90} />\n<FontAwesomeIcon icon=\"coffee\" rotation={180} />\n<FontAwesomeIcon icon=\"coffee\" rotation={270} />\n\nFlip horizontally, vertically, or both:\n\n<FontAwesomeIcon icon=\"coffee\" flip=\"horizontal\" />\n<FontAwesomeIcon icon=\"coffee\" flip=\"vertical\" />\n<FontAwesomeIcon icon=\"coffee\" flip=\"both\" />\n\nAnimating Icons:\n\n<FontAwesomeIcon icon=\"spinner\" spin />\n<FontAwesomeIcon icon=\"spinner\" pulse />\n\nBordered Icons:\n\n<FontAwesomeIcon icon=\"coffee\" border />\n\nPulled Icons:\n\n<FontAwesomeIcon icon=\"coffee\" pull=\"left\" />\n<FontAwesomeIcon icon=\"coffee\" pull=\"right\" />\n\nSwap Opacity\n\nThis feature is only available when using Duotone Icons\n<FontAwesomeIcon icon={['fad', 'coffee']} />\n<FontAwesomeIcon icon={['fad', 'coffee']} swapOpacity />\n\nAdding Classes Yourself\nYou can add classes for your own project purposes and styling to any component using the className property.\n\n<FontAwesomeIcon icon=\"spinner\" className=\"highlight\" />\n\nPower Transforms:\n\n<FontAwesomeIcon icon=\"coffee\" transform=\"shrink-6 left-4\" />\n<FontAwesomeIcon icon=\"coffee\" transform={{ rotate: 42 }} />\n\nMasking Icons:\n\n<FontAwesomeIcon icon=\"coffee\" mask={['far', 'circle']} />\n\nLayering Icons:\n\n<span className=\"fa-layers fa-fw\">\n  <FontAwesomeIcon icon=\"square\" color=\"green\" />\n  <FontAwesomeIcon icon=\"check\" inverse transform=\"shrink-6\" />\n</span>\n\nUsing SVG Symbols:\n\n<FontAwesomeIcon icon=\"coffee\" symbol />\n<FontAwesomeIcon icon=\"coffee\" symbol=\"beverage-icon\" />\n\nUnit Testing\nWhen testing components, you’ll want to make sure that any icons referenced in those components are available for testing purposes. You have a couple choices here:\n\nIf you want to test a child component on its own, you can import its icons explicitly.\n\nIf you’ve built a library instead, and your test doesn’t include your root component that defines your library of icons, you may see errors like this:\n\nCould not find icon { prefix: 'fas', iconName: 'chevron-right' }\nIf this happens, and the icon isn’t important to the particular test, you can mock FontAwesomeIcon like this:\n\nimport React from 'react'\n\nexport function FontAwesomeIcon(props) {\n  return <i classname=\"fa\"></i>\n}\n\nWith create-react-app, you can put this code in src/__mocks__/@fortawesome/react-fontawesome.js to automatically include it in any tests, and alleviate errors.\n\nProcessing <i> Elements into SVG using Font Awesome\nOur hope and intention is that React users will use this package (react-fontawesome) when using Font Awesome. This component leverages React’s architecture and philosophy. If you cannot use these components everywhere in your app and still have <i> tags on your page that need to be converted to <svg> tags we can still help you.\n\nA basic installation of Font Awesome has the ability to automatically transform <i class=\"fas fa-coffee\"></i> into <svg class=\"...\">...</svg> icons. This technology works with the browser’s DOM, requestAnimationFrame, and MutationObserver.\n\nWhen using the @fortawesome/fontawesome-svg-core package this behavior is disabled by default. (We would highly recommend you use FontAwesomeIcon if you can) This project uses that core package so you will have to explicitly enable it like this:\n\nTo configure the core library to convert non-React’ified parts of your App:\n\nimport { dom } from '@fortawesome/fontawesome-svg-core'\n\ndom.watch() // This will kick of the initial replacement of i to svg tags and configure a MutationObserver\n\nTypeScript\nTypings are included in this package. However, most types are defined in the underlying API library, @fortawesome/fontawesome-svg-core.\n\nSuppose that in one module, you add all fas icons to the library:\n\n  \nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fas)\n\n// ...\n\nThen suppose that in another module, you have some code that looks up one of the icons in the library. The import statement below imports two types and one function:\n\n  \nimport {\n  IconLookup,\n  IconDefinition,\n  findIconDefinition\n} from '@fortawesome/fontawesome-svg-core'\n\nconst coffeeLookup: IconLookup = { prefix: 'fas', iconName: 'coffee' }\nconst coffeeIconDefinition: IconDefinition = findIconDefinition(coffeeLookup)\n\n// ...\n\nexport class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>\n          <FontAwesomeIcon icon={coffeeIconDefinition} />\n        </h1>\n      </div>\n    )\n  }\n}\n\nFor Demo Purposes Only\nYou wouldn't normally declare intermediate objects like coffeeLookup just to look up an icon. So this is cumbersome and needlessly verbose for such a simple example. The purpose here is just to show how you might import type definitions and use them in declarations when it does make sense to do so.\nSeveral types, including IconLookup and IconDefinition, appearing above, actually originate from the @fortawesome/fontawesome-common-types package. They are re-exported from both @fortawesome/fontawesome-svg-core and @fortawesome/free-solid-svg-icons (and other icon packs). This is just to make importing more convenient in some cases. Refer to the index.d.ts in any module to see which types it exports.\n\nFAQs\nHow do I import the same icon from two different styles?\nUsing ES modules and import statements we can define unique names for two different styles of the same icon. Here’s an example:\n\n  \nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCoffee as fasFaCoffee } from '@fortawesome/pro-solid-svg-icons'\nimport { faCoffee as farFaCoffee } from '@fortawesome/pro-regular-svg-icons'\n\nlibrary.add(fasFaCoffee, farFaCoffee)\n\nHaallp! I don’t think tree-shaking is working.\nWe have detailed documentation on tree-shaking within our API-focused docs.\n\nI’m getting a Babel/Babel-loader error when using React Font Awesome\nIf you’re using a Mac or Linux, make sure you are up to date on the latest versions by running brew update & brew upgrade. Or delete your package.json.lock file & Node_Modules folder and then run either npm install or yarn install to reinstall all packages and dependencies.\n\nUseful Links\nThe Font Awesome React component is available on npm and that’s also where we maintain its official documentation.\n\nUseful Link\tWhat it’s good for\nAPI docs\tThe official React component documentation\nGitHub project\tWhere to submit issues and collaborate/contribute to codebase\n Python and Django\nReact Native \nads via CarbonAdobe Creative Cloud for Teams starting at $33.99 per month.ads via Carbon",
  "creationDate": "2021-03-05T05:40:52.202Z"
},{
  "_id": {
    "$oid": "6041cae979fc1142ec0cf1d9"
  },
  "title": "Facing Fear",
  "content": "Warren moved to a small town to pastor a church. After his ministry had some initial success, one of the locals turned on him. Concocting a story accusing Warren of horrendous acts, the man took the story to the local newspaper and even printed his accusations on pamphlets to distribute to local residents by mail. Warren and his wife started praying hard. If the lie was believed, their lives would be upended.\n\nKing David once experienced something similar. He faced an attack of slander by an enemy. “All day long they twist my words,” he said, “all their schemes are for my ruin” (Psalm 56:5). This sustained assault left him fearful and tearful (v. 8). But in the midst of the battle, he prayed this powerful prayer: “When I am afraid, I put my trust in you. . . . What can mere mortals do to me?” (vv. 3–4).\n\nDavid’s prayer can be a model for us today. When I am afraid—in times of fear or accusation, we turn to God. I put my trust in you—we place our battle in God’s powerful hands. What can mere mortals do to me?—facing the situation with Him, we remember how limited the powers against us really are.\n\n\nThe newspaper ignored the story about Warren. For some reason, the pamphlets were never distributed. What battle do you fear today? Talk to God. He’s willing to fight it with you.\n",
  "creationDate": "2021-03-05T06:07:33.963Z"
},{
  "_id": {
    "$oid": "6041cafb79fc1142ec0cf1da"
  },
  "title": "Facing Fear 2",
  "content": "Warren moved to a small town to pastor a church. After his ministry had some initial success, one of the locals turned on him. Concocting a story accusing Warren of horrendous acts, the man took the story to the local newspaper and even printed his accusations on pamphlets to distribute to local residents by mail. Warren and his wife started praying hard. If the lie was believed, their lives would be upended.\n\nKing David once experienced something similar. He faced an attack of slander by an enemy. “All day long they twist my words,” he said, “all their schemes are for my ruin” (Psalm 56:5). This sustained assault left him fearful and tearful (v. 8). But in the midst of the battle, he prayed this powerful prayer: “When I am afraid, I put my trust in you. . . . What can mere mortals do to me?” (vv. 3–4).\n\nDavid’s prayer can be a model for us today. When I am afraid—in times of fear or accusation, we turn to God. I put my trust in you—we place our battle in God’s powerful hands. What can mere mortals do to me?—facing the situation with Him, we remember how limited the powers against us really are.\n\n\nThe newspaper ignored the story about Warren. For some reason, the pamphlets were never distributed. What battle do you fear today? Talk to God. He’s willing to fight it with you.\n",
  "creationDate": "2021-03-05T06:08:49.626Z"
},{
  "_id": {
    "$oid": "6041cb0979fc1142ec0cf1db"
  },
  "title": "Facing Fear 3",
  "content": "Warren moved to a small town to pastor a church. After his ministry had some initial success, one of the locals turned on him. Concocting a story accusing Warren of horrendous acts, the man took the story to the local newspaper and even printed his accusations on pamphlets to distribute to local residents by mail. Warren and his wife started praying hard. If the lie was believed, their lives would be upended.\n\nKing David once experienced something similar. He faced an attack of slander by an enemy. “All day long they twist my words,” he said, “all their schemes are for my ruin” (Psalm 56:5). This sustained assault left him fearful and tearful (v. 8). But in the midst of the battle, he prayed this powerful prayer: “When I am afraid, I put my trust in you. . . . What can mere mortals do to me?” (vv. 3–4).\n\nDavid’s prayer can be a model for us today. When I am afraid—in times of fear or accusation, we turn to God. I put my trust in you—we place our battle in God’s powerful hands. What can mere mortals do to me?—facing the situation with Him, we remember how limited the powers against us really are.\n\n\nThe newspaper ignored the story about Warren. For some reason, the pamphlets were never distributed. What battle do you fear today? Talk to God. He’s willing to fight it with you.",
  "creationDate": "2021-03-05T06:09:04.569Z"
},{
  "_id": {
    "$oid": "6041cb0e79fc1142ec0cf1dc"
  },
  "title": "Facing Fear 4",
  "content": "Warren moved to a small town to pastor a church. After his ministry had some initial success, one of the locals turned on him. Concocting a story accusing Warren of horrendous acts, the man took the story to the local newspaper and even printed his accusations on pamphlets to distribute to local residents by mail. Warren and his wife started praying hard. If the lie was believed, their lives would be upended.\n\nKing David once experienced something similar. He faced an attack of slander by an enemy. “All day long they twist my words,” he said, “all their schemes are for my ruin” (Psalm 56:5). This sustained assault left him fearful and tearful (v. 8). But in the midst of the battle, he prayed this powerful prayer: “When I am afraid, I put my trust in you. . . . What can mere mortals do to me?” (vv. 3–4).\n\nDavid’s prayer can be a model for us today. When I am afraid—in times of fear or accusation, we turn to God. I put my trust in you—we place our battle in God’s powerful hands. What can mere mortals do to me?—facing the situation with Him, we remember how limited the powers against us really are.\n\n\nThe newspaper ignored the story about Warren. For some reason, the pamphlets were never distributed. What battle do you fear today? Talk to God. He’s willing to fight it with you.",
  "creationDate": "2021-03-05T06:09:13.780Z"
},{
  "_id": {
    "$oid": "6041cbee79fc1142ec0cf1dd"
  },
  "title": "Hello Dolly",
  "content": "This is the first text from WordPress website!",
  "creationDate": "2021-03-05T06:12:41.132Z"
},{
  "_id": {
    "$oid": "6041cc2179fc1142ec0cf1de"
  },
  "title": "Hello Dolly2",
  "content": "Hello Dolly say I do....",
  "creationDate": "2021-03-05T06:13:38.741Z"
},{
  "_id": {
    "$oid": "6041cc7679fc1142ec0cf1df"
  },
  "title": "Hello Dolly3",
  "content": "Hello Dolly say I do....",
  "creationDate": "2021-03-05T06:15:11.836Z"
},{
  "_id": {
    "$oid": "6041ccaf79fc1142ec0cf1e0"
  },
  "title": "Hello Dolly5",
  "content": "Hello Dolly say I do....",
  "creationDate": "2021-03-05T06:16:09.826Z"
},{
  "_id": {
    "$oid": "6041cce579fc1142ec0cf1e1"
  },
  "title": "Hello 6",
  "content": "Hello Dolly say I do....",
  "creationDate": "2021-03-05T06:17:01.834Z"
},{
  "_id": {
    "$oid": "6041cd0e79fc1142ec0cf1e2"
  },
  "title": "Hey Jude",
  "content": "testing herer",
  "creationDate": "2021-03-05T06:17:46.762Z"
}]